
Jeewanjyot Dhanjal
Assignment 9
•	  Briefly describe the concept of "Stack Frame" (1 through 5 points depending on quality of the answer)
A stack frame is basically a frame that organizes tasks in the order that it needs to execute them in. It pushes bytes, words and addresses onto the stack to execute them.
Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
•	  Briefly describe the concept of a "Calling Convention" (1 through 5 points depending on quality of the answer)
The calling convention is basically describing how called code is handled. For example it is which order parameters are allocated, how parameters are passed and other things like that. These include pushing to the stack or being placed into registers.
•	  Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)
It creates a new stack frame while preserving the previous stack.
•	  What is the x64 equivalent to "push ebp" and "mov ebp,esp)" (2 points)
Push rbp and mov rbp, rsp
•	  What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention" (2 points)
The differences are in the order parameters are allocated, passed, put on the stack or into registers. 
Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
void myFunction(int a, int b, int c, int d, int e, int f)  {
  //some code here
}
•	  Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? (3 points)
Hint: https://docs.microsoft.com/en-us/cpp/build/parameter-passing
Return address, shadow space, fifth parameter
•	  Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)
Hint: https://en.wikipedia.org/wiki/X86_calling_conventions
First 4 parameters - RCX, RDX, R8, R9 go to registers while others are passed on to the stack.
